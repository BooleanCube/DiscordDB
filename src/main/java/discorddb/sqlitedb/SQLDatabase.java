package discorddb.sqlitedb;

import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * {@link SQLDatabase} represents a connection to an SQLite database
 * using H2 as the database engine.
 * <br>
 * It contains several static methods that allow for creating and
 * dropping tables, executing SQL queries, and backing up the database.
 */
public class SQLDatabase {

    private static final Connection connection;
    private static final Statement statement;

    private static final HashMap<String, DatabaseTable> tables;

    static {
        try {
            connection = DriverManager.getConnection("jdbc:h2:~/database");
            statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

            tables = new HashMap<>();
            ResultSet listTables = statement.executeQuery("SHOW TABLES");
            ArrayList<String> tableNames = new ArrayList<>();
            while(listTables.next()) {
                String tableName = listTables.getString(1);
                int columnCount = listTables.getMetaData().getColumnCount();
                tables.put(tableName, new DatabaseTable(statement, tableName, columnCount));
            }
            listTables.close();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Creates a new table in the database with the given name and columns.
     *
     * @param tableName The name of the table to create.
     * @param columns An array of column names and types to define the columns in the new table.
     * @return true if the table was created successfully, false otherwise.
     * @throws SQLException If an error occurs while executing the SQL command.
     */
    public static boolean createTable(String tableName, String... columns) throws SQLException {
        if(tableName == null || tableName.equals(""))
            throw new NullPointerException("The table name can't be empty or null!");
        if(tables.containsKey(tableName))
            throw new SQLException("A table with the same name already exists in this database!");
        tables.put(tableName, new DatabaseTable(statement, tableName, columns.length));
        return !statement.execute(String.format("CREATE TABLE IF NOT EXISTS %s (%s)", tableName, String.join(", ", columns)));
    }

    /**
     * Gets the DatabaseTable object for the specified table name.
     *
     * @param tableName The name of the table to retrieve.
     * @return The DatabaseTable object for the specified table, or null if no such table exists.
     */
    public static DatabaseTable getTable(String tableName) {
        if(!tables.containsKey(tableName))
            return null;

        return tables.get(tableName);
    }

    /**
     * Drops all tables in the database.
     *
     * @return true if all tables were dropped successfully, false otherwise.
     * @throws SQLException If an error occurs while executing the SQL command.
     */
    public static boolean dropAllTables() throws SQLException {
        tables.clear();
        return !statement.execute("DROP ALL OBJECTS");
    }

    /**
     * Drops the specified table from the database.
     *
     * @param tableName The name of the table to drop.
     * @return true if the table was dropped successfully, false otherwise.
     * @throws SQLException If an error occurs while executing the SQL command.
     */
    public static boolean dropTable(String tableName) throws SQLException {
        tables.remove(tableName);
        return !statement.execute(String.format("DROP TABLE %s", tableName));
    }

    /**
     * Executes a SQL query and returns the result set generated by the query.
     *
     * @param sqlCommand the SQL command to be executed
     * @return the result set generated by the query
     * @throws SQLException if a database access error occurs or the SQL command syntax is invalid
     */
    public static ResultSet executeQuery(String sqlCommand) throws SQLException {
        return statement.executeQuery(sqlCommand);
    }

    /**
     * Executes the given SQL command, which may be an INSERT, UPDATE, or DELETE statement,
     * or an SQL statement that returns nothing, and returns a boolean value indicating
     * the success of the command execution.
     *
     * @param sqlCommand the SQL command to be executed
     * @return true if the command is an SQL statement that returns nothing, false otherwise
     * @throws SQLException if a database access error occurs or the SQL command syntax is invalid
     */
    public static boolean execute(String sqlCommand) throws SQLException {
        return !statement.execute(sqlCommand);
    }

    /**
     * Backs up the entire database to a zip file named 'database-backup.zip' and
     * returns a boolean value indicating the success of the backup operation.
     *
     * @return true if the backup operation was successful, false otherwise
     * @throws SQLException if a database access error occurs or the backup operation fails
     */
    public static boolean backupDatabase() throws SQLException {
        return !statement.execute("BACKUP TO 'database-backup.zip'");
    }

}
